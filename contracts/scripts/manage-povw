#!/bin/bash

set -eo pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SCRIPT_FILE="${SCRIPT_DIR}/Manage.PoVW.s.sol"
REPO_ROOT_DIR="${SCRIPT_DIR:?}/../.."
FIREBLOCKS=0
export FOUNDRY_OUT=${FOUNDRY_OUT:-"contracts/out"}

# Check for python3, required for updating the deployment toml
if ! command -v python3 >/dev/null 2>&1; then
    echo "❌ python3 is not installed"
    exit 1
fi

# Check for tomlkit (Python package), required for updating the deployment toml
if ! python3 -c "import tomlkit" >/dev/null 2>&1; then
    echo "❌ tomlkit is not installed for python3"
    echo "To install: python3 -m pip install tomlkit"
    exit 1
fi

# Check for yq
if ! command -v yq >/dev/null 2>&1; then
    echo "❌ yq is not installed"
    echo "Install yq v4+ from: https://github.com/mikefarah/yq"
    exit 1
fi

POSITIONAL_ARGS=()
FORGE_SCRIPT_FLAGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
    -f|--fireblocks)
        FIREBLOCKS=1
        shift # past argument
        ;;
    --broadcast|--verify)
        FORGE_SCRIPT_FLAGS+=("$1") 
        shift
        ;;
    -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

DEPLOY_KEY=${CHAIN_KEY:?}

# HINT: deployment_secrets.toml contains API keys. You can write it yourself, or ask a friend.
load_env_var() {
    local var_name="$1"
    local config_key="$2"
    local config_file="$3"
    
    # Get current value of the variable
    local current_value=$(eval echo \$$var_name)
    
    if [ -z "$current_value" ]; then
        local new_value=$(yq eval -e "$config_key" "$REPO_ROOT_DIR/contracts/$config_file")
        [ -n "$new_value" ] && [[ "$new_value" != "null" ]] || exit 1
        export $var_name="$new_value"
        echo "$var_name from $config_file: $new_value" > /dev/stderr
    else
        echo "$var_name from env: $current_value" > /dev/stderr
    fi
}

# Run a Forge script with support for Fireblocks with options set automatically
forge_script() {
    # Set our function. If the function is "help", or if the function is
    # unspecified, then print some help.
    local script_function="${1:-help}"
    shift

    if [ "${script_function:?}" == "help" ]; then
        cat << EOF
🔧 PoVW Contract Management Script
================================

Usage: $0 <command> [options]

Commands:
  DeployPoVW                  Deploy both PovwAccounting and PovwMint contracts
  UpgradePoVWAccounting       Upgrade the PovwAccounting contract
  UpgradePoVWMint             Upgrade the PovwMint contract
  RollbackPoVWAccounting      Rollback the PovwAccounting contract to previous version
  RollbackPoVWMint            Rollback the PovwMint contract to previous version
  TransferPoVWOwnership       Transfer ownership of PovwAccounting contract
  TransferPoVWMintOwnership   Transfer ownership of PovwMint contract

Options:
  -f, --fireblocks       Use Fireblocks for transaction signing
  --broadcast            Broadcast transactions to network
  --verify               Verify contracts on Etherscan
  -h, --help             Show this help message

Environment Variables:
  CHAIN_KEY              Required. Deployment environment key (anvil, ethereum-mainnet, ethereum-sepolia, ethereum-sepolia-staging)
  DEPLOYER_PRIVATE_KEY   Required. Private key for transaction signing (0x...)

Production Deployment Requirements:
  - deployment.toml must have povw-accounting-admin and povw-mint-admin addresses set (not 0x0)
  - deployment.toml must have zkc and zkc-staking-rewards addresses set
  - Image IDs are loaded from PovwImageId.sol library (can override with env vars)
  - POVW_LOG_UPDATER_ID and POVW_MINT_CALCULATOR_ID env vars (optional overrides)

Development Mode:
  RISC0_DEV_MODE=1       Enables mock contract deployment
  - Deploys mock verifier and ZKC contracts automatically
  - Uses mock image IDs for testing
  - Skips deployment.toml updates

Examples:
  # Deploy to anvil in development mode
  RISC0_DEV_MODE=1 CHAIN_KEY=anvil DEPLOYER_PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 \\
  $0 DeployPoVW --broadcast
  
  # Deploy to sepolia production
  CHAIN_KEY=ethereum-sepolia DEPLOYER_PRIVATE_KEY=0x... \\
  $0 DeployPoVW --broadcast --verify
  
  # Deploy to sepolia staging environment
  CHAIN_KEY=ethereum-sepolia-staging DEPLOYER_PRIVATE_KEY=0x... \\
  $0 DeployPoVW --broadcast --verify
  
  # Upgrade PovwAccounting on mainnet with Fireblocks
  CHAIN_KEY=ethereum-mainnet $0 UpgradePoVWAccounting --fireblocks --broadcast --verify
  
  # Rollback PovwMint to previous version
  CHAIN_KEY=ethereum-sepolia DEPLOYER_PRIVATE_KEY=0x... \\
  $0 RollbackPoVWMint --broadcast
  
  # Transfer ownership of PovwAccounting
  CHAIN_KEY=ethereum-sepolia DEPLOYER_PRIVATE_KEY=0x... \\
  $0 TransferPoVWOwnership --broadcast

Notes:
  - Network configuration is loaded from deployment.toml and deployment_secrets.toml
  - Private keys must be provided via DEPLOYER_PRIVATE_KEY environment variable
  - Upgrades require reference builds for safety checks
  - Fireblocks requires fireblocks-json-rpc to be installed
  - All deployments automatically update deployment.toml (except in dev mode)
  - Image IDs are loaded from PovwImageId.sol unless overridden by environment variables
EOF
        exit 0
    fi

    # Load environment variables only when running actual commands
    echo "Loading environment variables from deployment TOML files"
    load_env_var "RPC_URL" ".chains[\"${CHAIN_KEY:?}\"].rpc-url" "deployment_secrets.toml"
    load_env_var "ETHERSCAN_API_KEY" ".chains[\"${CHAIN_KEY:?}\"].etherscan-api-key" "deployment_secrets.toml"
    load_env_var "CHAIN_ID" ".deployment[\"${DEPLOY_KEY:?}\"].id" "deployment.toml"

    # Check if we're on the correct network
    CONNECTED_CHAIN_ID=$(cast chain-id --rpc-url ${RPC_URL:?})
    if [[ "${CONNECTED_CHAIN_ID:?}" != "${CHAIN_ID:?}" ]]; then
        echo -e "${RED}Error: connected chain id and configured chain id do not match: ${CONNECTED_CHAIN_ID:?} != ${CHAIN_ID:?} ${NC}"
        exit 1
    fi

    # Use standalone Deploy.PoVW.s.sol for deployments, Manage.PoVW.s.sol for everything else
    local target
    if [ "${script_function:?}" == "DeployPoVW" ]; then
        target="${SCRIPT_DIR}/Deploy.PoVW.s.sol:DeployPoVW"
        echo "Running standalone deployment script $target"
    else
        target="${SCRIPT_FILE:?}:${script_function:?}"
        echo "Running management script $target"
    fi

    if [ $FIREBLOCKS -gt 0 ]; then
        # Check for fireblocks
        if ! command -v fireblocks-json-rpc &> /dev/null
        then
            echo "fireblocks-json-rpc not found"
            echo "can be installed with npm install -g @fireblocks/fireblocks-json-rpc"
            exit 1
        fi

        # Run forge via fireblocks
        fireblocks-json-rpc --verbose --rpcUrl ${RPC_URL:?} --http --apiKey ${FIREBLOCKS_API_KEY:?} -- \
            forge script ${FORGE_SCRIPT_FLAGS} \
            --slow --unlocked \
            --etherscan-api-key=${ETHERSCAN_API_KEY:?} \
            --rpc-url {} \
            "$target" "$@"
    else
        # Run forge
        forge script ${FORGE_SCRIPT_FLAGS} \
            --private-key=${DEPLOYER_PRIVATE_KEY:?} \
            --etherscan-api-key=${ETHERSCAN_API_KEY:?} \
            --rpc-url ${RPC_URL:?} \
            "$target" "$@"
    fi
}

# Run from the repo root for consistency.
cd ${REPO_ROOT_DIR:?}

# Default to help if no arguments provided
if [ $# -eq 0 ]; then
    forge_script "help"
else
    forge_script "$@"
fi