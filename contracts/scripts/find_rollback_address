#!/bin/bash

set -eo pipefail

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
REPO_ROOT_DIR="${SCRIPT_DIR:?}/../.."

# Run from the repo root for consistency.
cd ${REPO_ROOT_DIR:?}

if [ -n "$STACK_TAG" ]; then
    DEPLOY_KEY=${CHAIN_KEY:?}-${STACK_TAG:?}
else
    DEPLOY_KEY=${CHAIN_KEY:?}
fi

load_env_var() {
    local var_name="$1"
    local config_key="$2"
    local config_file="$3"
    
    # Get current value of the variable
    local current_value=$(eval echo \$$var_name)
    
    if [ -z "$current_value" ]; then
        echo "$var_name from $config_file: " > /dev/stderr
        local new_value=$(yq eval -e "$config_key" "$REPO_ROOT_DIR/contracts/$config_file")
        [ -n "$new_value" ] && [[ "$new_value" != "null" ]] || exit 1
        export $var_name="$new_value"
    else
        echo "$var_name from env $current_value"
    fi
}

echo "Loading environment variables from deployment TOML files"
load_env_var "RPC_URL" ".chains[\"${CHAIN_KEY:?}\"].rpc-url" "deployment_secrets.toml"
load_env_var "PROXY_ADDRESS" ".deployment[\"${DEPLOY_KEY:?}\"].boundless-market" "deployment.toml"
load_env_var "CHAIN_ID" ".deployment[\"${DEPLOY_KEY:?}\"].id" "deployment.toml"

# Check if we're on the correct network
CONNECTED_CHAIN_ID=$(cast chain-id --rpc-url ${RPC_URL:?})
if [[ "${CONNECTED_CHAIN_ID:?}" != "${CHAIN_ID:?}" ]]; then
    echo -e "${RED}Error: connected chain id and configured chain id do not match: ${CONNECTED_CHAIN_ID:?} != ${CHAIN_ID:?} ${NC}"
    exit 1
fi

# Config
SLOT="0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC" # EIP-1967 slot
STEP=86400 # 24 hours in seconds
# STEP=3600 # 1 hour in seconds
STEPS_BACK=7 # Number of steps to go back in time
AVG_BLOCK_TIME=2

# Determine OS for date formatting
platform=$(uname)
if [[ "$platform" == "Darwin" ]]; then
  # macOS
  format_date() { date -r "$1" "+%Y-%m-%d"; }
else
  # Linux
  format_date() { date -d "@$1" "+%Y-%m-%d"; }
fi

# Get current implementation
CURRENT_RAW=$(cast storage "$PROXY_ADDRESS" "$SLOT" --rpc-url "$RPC_URL")
CURRENT_IMPL="0x${CURRENT_RAW:26}"
echo "Current implementation: $CURRENT_IMPL"

LATEST_BLOCK=$(cast block-number --rpc-url "$RPC_URL")
LATEST_TS=$(cast block "$LATEST_BLOCK" --json --rpc-url "$RPC_URL" | jq -r .timestamp)

for ((i=1; i<=STEPS_BACK; i++)); do
  TARGET_TS=$((LATEST_TS - i * STEP))
  DELTA_SECS=$((LATEST_TS - TARGET_TS))
  BLOCK_DELTA=$((DELTA_SECS / AVG_BLOCK_TIME))
  APPROX_BLOCK=$((LATEST_BLOCK - BLOCK_DELTA))
  DATE_STR=$(format_date "$TARGET_TS")

  VALUE=$(cast storage "$PROXY_ADDRESS" "$SLOT" --block "$APPROX_BLOCK" --rpc-url "$RPC_URL" 2>/dev/null || true)
  [[ -z "$VALUE" ]] && { echo "[$DATE_STR] Could not fetch storage at block $APPROX_BLOCK"; continue; }

  IMPL="0x${VALUE:26}"

  if [[ "$IMPL" != "$CURRENT_IMPL" ]]; then
    echo "[$DATE_STR] Block $APPROX_BLOCK: Implementation was $IMPL"
  fi
done