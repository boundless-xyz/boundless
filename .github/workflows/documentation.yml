name: Documentation CI/CD

on:
  push:
    paths:
      - "documentation/**"

jobs:
  deployment-docs-address-check:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Check deployment addresses consistency between deployment.toml and docs
        run: |
          echo "Checking deployment addresses consistency between deployment.toml and documentation"
          
          ERRORS=0
          
          # Check for TODO placeholders in documentation
          TODO_LINES=$(grep -n "TODO" documentation/site/pages/developers/smart-contracts/deployments.mdx || true)
          if [ -n "$TODO_LINES" ]; then
            echo "$TODO_LINES"
            ERRORS=$((ERRORS + 1))
          fi
          
          # Function to extract and check addresses for a network
          check_network() {
            local network_name="$1"
            local toml_section="$2"
            local docs_section="$3"
            
            # Extract addresses from deployment.toml
            MARKET_TOML=$(grep -A 15 "$toml_section" contracts/deployment.toml | grep "boundless-market" | cut -d'"' -f2)
            VERIFIER_TOML=$(grep -A 15 "$toml_section" contracts/deployment.toml | grep "^verifier" | cut -d'"' -f2)
            SET_VERIFIER_TOML=$(grep -A 15 "$toml_section" contracts/deployment.toml | grep "set-verifier" | cut -d'"' -f2)
            
            # Extract addresses from documentation (only if they're not TODO)
            MARKET_DOCS=$(grep -A 10 "$docs_section" documentation/site/pages/developers/smart-contracts/deployments.mdx | grep "BoundlessMarket" | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
            SET_VERIFIER_DOCS=$(grep -A 10 "$docs_section" documentation/site/pages/developers/smart-contracts/deployments.mdx | grep "SetVerifier" | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
            VERIFIER_DOCS=$(grep -A 10 "$docs_section" documentation/site/pages/developers/smart-contracts/deployments.mdx | grep "RiscZeroVerifierRouter" | grep -o "0x[a-fA-F0-9]\{40\}" | head -1)
            
            # Convert to lowercase for comparison
            MARKET_TOML=$(echo "$MARKET_TOML" | tr '[:upper:]' '[:lower:]')
            VERIFIER_TOML=$(echo "$VERIFIER_TOML" | tr '[:upper:]' '[:lower:]')
            SET_VERIFIER_TOML=$(echo "$SET_VERIFIER_TOML" | tr '[:upper:]' '[:lower:]')
            
            MARKET_DOCS=$(echo "$MARKET_DOCS" | tr '[:upper:]' '[:lower:]')
            SET_VERIFIER_DOCS=$(echo "$SET_VERIFIER_DOCS" | tr '[:upper:]' '[:lower:]')
            VERIFIER_DOCS=$(echo "$VERIFIER_DOCS" | tr '[:upper:]' '[:lower:]')
            
            # Check addresses and show results
            local network_errors=0
            
            if [ -n "$MARKET_DOCS" ]; then
              if [ "$MARKET_TOML" = "$MARKET_DOCS" ]; then
                echo "✅ $network_name matches deployment.toml"
                return
              else
                echo "❌ Mismatch in $network_name BoundlessMarket address:"
                echo "   deployment.toml: $MARKET_TOML"
                echo "   documentation:   $MARKET_DOCS"
                network_errors=$((network_errors + 1))
              fi
            fi
            
            if [ -n "$VERIFIER_DOCS" ] && [ "$VERIFIER_TOML" != "$VERIFIER_DOCS" ]; then
              echo "❌ Mismatch in $network_name RiscZeroVerifierRouter address:"
              echo "   deployment.toml: $VERIFIER_TOML"
              echo "   documentation:   $VERIFIER_DOCS"
              network_errors=$((network_errors + 1))
            fi
            
            if [ -n "$SET_VERIFIER_DOCS" ] && [ "$SET_VERIFIER_TOML" != "$SET_VERIFIER_DOCS" ]; then
              echo "❌ Mismatch in $network_name SetVerifier address:"
              echo "   deployment.toml: $SET_VERIFIER_TOML"
              echo "   documentation:   $SET_VERIFIER_DOCS"
              network_errors=$((network_errors + 1))
            fi
            
            ERRORS=$((ERRORS + network_errors))
          }
          
          # Check all networks
          check_network "Ethereum Sepolia" "ethereum-sepolia-prod" "### Ethereum Sepolia"
          check_network "Base Mainnet" "base-mainnet" "### Base Mainnet"
          check_network "Base Sepolia" "base-sepolia" "### Base Sepolia"
          
          if [ $ERRORS -eq 0 ]; then
            echo "✅ All documented deployment addresses match deployment.toml and no TODOs found"
          else
            echo ""
            echo "❌ Found $ERRORS issues with deployment documentation!"
            echo "Please ensure contract addresses are consistent between /boundless/contracts/deployment.toml and documentation"
            echo "and replace any TODO placeholders with actual addresses"
            exit 1
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./documentation

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Get latest tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $GITHUB_ENV

      - name: 🍞 Setup Bun
        uses: risc0/setup-bun@v1.2.1
        with:
          bun-version: 1.1.38

      - name: Install dependencies
        run: bun install

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: "v1.0.0"

      - name: Run CI checks & build
        env:
          LATEST_TAG: ${{ env.LATEST_TAG }}
        run: bun run ci

      - name: Install Vercel CLI
        run: |
          bun install --global vercel@latest
          vercel telemetry disable

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: team_7ekBjCLrY6obIej6ulZx7iCg
          VERCEL_PROJECT_ID: prj_52J4bKnmBJxkhM6DQIxXBPsI2L7N
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            DEPLOYMENT_URL=$(vercel deploy site/dist --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
          else
            DEPLOYMENT_URL=$(vercel deploy site/dist --token=${{ secrets.VERCEL_TOKEN }} --yes)
          fi
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Find or Create Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to find PR number from the commit
          PR_NUMBER=$(gh pr list --search "${{ github.sha }}" --json number --jq '.[0].number')
          
          if [ ! -z "$PR_NUMBER" ]; then
            # If we found a PR, comment on it
            COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          else
            # If no PR found, comment on the commit
            COMMIT_SHA=${{ github.sha }}
            COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/commits/${COMMIT_SHA}/comments"
          fi
          
          # Get all comments
          COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$COMMENTS_URL")
          
          # Find existing comment ID
          COMMENT_ID=$(echo "$COMMENTS" | jq -r '.[] | select(.body | contains("🚀 Documentation Preview")) | .id' | head -n1)
          
          # Updated comment body with both URLs
          COMMENT_BODY="🚀 Documentation Preview\n\nDeployment URL: ${{ steps.deploy.outputs.deployment_url }}\n\n_Updated at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')_"
          
          # Create JSON payload
          PAYLOAD="{\"body\":\"$COMMENT_BODY\"}"
          
          if [ ! -z "$PR_NUMBER" ]; then
            if [ ! -z "$COMMENT_ID" ]; then
              # Update existing PR comment
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -X PATCH \
                    -d "$PAYLOAD" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/comments/${COMMENT_ID}"
            else
              # Create new PR comment
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -X POST \
                    -d "$PAYLOAD" \
                    "$COMMENTS_URL"
            fi
          else
            # For commits without PRs, create a commit comment
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -X POST \
                  -d "$PAYLOAD" \
                  "$COMMENTS_URL"
          fi
