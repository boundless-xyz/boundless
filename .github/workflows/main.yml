name: Lint / Format / Test

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    # see: https://github.com/orgs/community/discussions/26822
  main-status-check:
    if: always()
    needs:
      - rust
      - link-check
      - format
      - foundry
      - examples
      - docker
    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1

  rust:
    runs-on: [self-hosted, Linux, X64, prod, cpu]
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          # Full history is required by license-check.py
          fetch-depth: 0
          submodules: recursive

      - name: install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-1.1
        with:
          toolchain: '1.79'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo risczero
        uses: ./.github/actions/bininstall-risc0
        with:
          risczero-version: '1.1'
          toolchain-version: 'r0.1.79.0-2'

      - name: install cargo-sort
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-sort
          version: "=1.0.9"
          locked: true

      - name: cargo Sort
        run: cargo sort --workspace --check

      - name: cargo format
        run: cargo fmt --all -- --check

      - name: license check
        run: python license-check.py

      - name: forge build
        run: forge build
        working-directory: contracts

      - name: cargo check
        run: cargo check

      - name: Install sqlx-cli
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: sqlx-cli
          version: '=0.8.2'
          locked: true
          args: --no-default-features
          features: postgres

      - name: run taskdb migrations
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
        run: sqlx migrate run --source ./crates/taskdb/migrations/

      - name: cargo test
        run: cargo test --workspace --all-targets
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/postgres

      - name: sccache stats
        run: sccache --show-stats

  link-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: restore lychee cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      - name: install cargo-binstall
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-binstall
          version: '=1.10.8'
          locked: true

      - run: cargo binstall -y --force lychee@0.15.1

      - name: run lychee
        # lychee does not respect the .gitignore natively
        # https://github.com/lycheeverse/lychee/issues/470#issuecomment-1094690229
        run: git ls-files '*.md' | xargs lychee --base . --cache --

      - name: save lychee cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .lycheecache
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: install cargo-binstall
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-binstall
          version: '=1.10.8'
          locked: true

      - run: cargo binstall -y --force dprint@0.47.2

      - run: dprint check

  foundry:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: forge fmt
        run: forge fmt --check
        working-directory: contracts

      - name: forge test
        run: forge test -vvv
        working-directory: contracts

  examples:
    runs-on: [self-hosted, Linux, X64, prod, cpu]
    strategy:
      matrix:
        workspace:
          - examples/counter
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          # Full history is required by license-check.py
          fetch-depth: 0
          submodules: recursive

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-1.1
        with:
          toolchain: '1.79'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo risczero
        uses: ./.github/actions/bininstall-risc0
        with:
          risczero-version: '1.1'
          toolchain-version: 'r0.1.79.0-2'

      - name: install cargo-sort
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-sort
          version: "=1.0.9"
          locked: true

      - name: cargo Sort
        run: cargo sort --workspace --check
        working-directory: ${{ matrix.workspace }}

      - name: cargo format
        run: cargo fmt --all -- --check
        working-directory: ${{ matrix.workspace }}

      - name: forge build
        run: forge build
        working-directory: contracts

      - name: cargo build
        run: cargo build
        working-directory: ${{ matrix.workspace }}

      - name: cargo clippy
        run: cargo clippy --workspace
        working-directory: ${{ matrix.workspace }}
        env:
          RISC0_SKIP_BUILD: 1

      - name: forge fmt
        run: forge fmt --check
        working-directory: ${{ matrix.workspace }}/contracts

      - name: forge test
        run: forge test -vvv
        working-directory: ${{ matrix.workspace }}/contracts

      - name: cargo test
        run: cargo test
        working-directory: ${{ matrix.workspace }}
        env:
          RISC0_DEV_MODE: 1

      - name: sccache stats
        run: sccache --show-stats

  files-changed:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          filters: |
            src:
              - 'dockerfiles/**'
              - 'compose.yml'
              - '.env-compose'

  docker:
    runs-on: [self-hosted, Linux, X64, prod, cpu]
    needs: files-changed
    if: needs.files-changed.outputs.docker == 'true'
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: docker-compose lint
        run: docker compose --profile broker --env-file ./.env-compose config

      - name: Fetch CI AWS Creds
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-west-2'
          role-to-assume: 'arn:aws:iam::083632199359:role/gha_oidc_risc0_cache_shared_access'
          output-credentials: true

      - name: create ci creds file
        run: |
          echo "[default]" > ./dockerfiles/ci-cache-creds.txt
          echo "aws_access_key_id=${{ steps.aws-creds.outputs.aws-access-key-id }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_secret_access_key=${{ steps.aws-creds.outputs.aws-secret-access-key }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_session_token=${{ steps.aws-creds.outputs.aws-session-token }}" >> ./dockerfiles/ci-cache-creds.txt

      - name: Setup docker builder
        run: docker buildx create --driver docker-container --use

      - name: docker compose build
        run: docker compose --profile broker --env-file ./.env-compose -f compose.yml -f ./dockerfiles/compose.ci.yml build