name: Lint / Format / Test

on:
  pull_request:
    branches:
      - main
      - 'release-*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # see: https://github.com/orgs/community/discussions/26822
  main-status-check:
    if: always()
    needs:
      - rust
      - link-check
      - format
      - foundry
      - examples
      - docker
      - rust-pkg-check
      - docs-rs
      - bento
      - bento_run

    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1

  rust:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          # Full history is required by license-check.py
          fetch-depth: 0
          submodules: recursive

      - name: install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo risczero
        uses: ./.github/actions/bininstall-risc0
        with:
          risczero-version: '2.0.0'
          toolchain-version: '1.85.0'

      - name: install cargo-sort
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-sort
          version: "=1.0.9"
          locked: true

      - name: cargo Sort
        run: cargo sort --workspace --check

      - name: cargo format
        run: cargo fmt --all -- --check

      - name: license check
        run: python license-check.py

      - name: forge build
        run: forge build

      - name: cargo check
        run: cargo check --locked --all-targets

      - name: cargo doc
        run: cargo doc --locked

      - name: cargo clippy
        env:
          RUSTFLAGS: "-Dwarnings"
          RISC0_SKIP_BUILD: 1
        run: cargo clippy --locked --all-targets

        # build script for boundless-market copies Solidity build artifacts.
        # check that these are not modified, which would indicate they need to be updated.
      - name: check for changes to files in git index
        run: git diff --exit-code -- crates/boundless-market/src/contracts/artifacts

      - name: cargo test
        run: cargo test --locked --workspace --all-targets -- --include-ignored
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
          RISC0_DEV_MODE: true

      - name: sccache stats
        run: sccache --show-stats

  bento:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
    defaults:
      run:
        working-directory: ./bento

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo-sort
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-sort
          version: "=1.0.9"
          locked: true

      - name: cargo Sort
        run: cargo sort --workspace --check

      - name: cargo format
        run: cargo fmt --all -- --check

      - name: cargo clippy
        env:
          RUSTFLAGS: "-Dwarnings"
        run: cargo clippy --all-targets

      - name: cargo doc
        run: cargo doc

      - name: Install sqlx-cli
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: sqlx-cli
          version: '=0.8.2'
          locked: true
          args: --no-default-features
          features: postgres

      - name: run taskdb migrations
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
        run: sqlx migrate run --source ./crates/taskdb/migrations/

      - name: cargo test
        run: cargo test --locked --workspace --all-targets -- --ignored
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
          RISC0_DEV_MODE: true

      - name: sccache stats
        run: sccache --show-stats


  bento_run:
    runs-on: [ self-hosted, Linux, X64, prod, cuda, g6.4xlarge ]
    needs: files-changed
    if: needs.files-changed.outputs.bento == 'true'
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      - name: Fetch CI AWS Creds
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-west-2'
          role-to-assume: 'arn:aws:iam::083632199359:role/gha_oidc_risc0_cache_shared_access'
          output-credentials: true

      - name: create ci creds file
        run: |
          echo "[default]" > ./dockerfiles/ci-cache-creds.txt
          echo "aws_access_key_id=${{ steps.aws-creds.outputs.aws-access-key-id }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_secret_access_key=${{ steps.aws-creds.outputs.aws-secret-access-key }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_session_token=${{ steps.aws-creds.outputs.aws-session-token }}" >> ./dockerfiles/ci-cache-creds.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start bento cluster
        run: docker compose --env-file ./.env.broker-template -f compose.yml -f ./dockerfiles/compose.ci.yml up -d

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: Run a sample proof through
        # TODO: snark, multi-segments, bigint, keccak, composition guest to express all functionality
        working-directory: bento
        run: RUST_LOG=info cargo run --bin bento_cli -- -c 32 -s

  rust-pkg-check:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo risczero
        uses: ./.github/actions/bininstall-risc0
        with:
          risczero-version: '2.0.0'
          toolchain-version: '1.85.0'

      - name: check order-stream
        run: cargo check --locked -p order-stream --bin order_stream

      - name: check broker
        run: cargo check --locked -p broker --bin broker

  link-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # Added a name for clarity
        uses: actions/checkout@v4

      # The existing Actions cache step - we leave it for now but will ignore lychee's use of it below
      - name: Restore lychee Actions cache # Added a name for clarity
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: .lycheecache # Note: Lychee default cache file is usually .lychee-cache (with a dash)
          key: cache-lychee-${{ github.sha }}
          restore-keys: cache-lychee-

      - name: Install cargo-binstall
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-binstall
          version: '=1.10.8' # Using version from your original file
          locked: true

      - name: Install lychee # Added a name for clarity
        # Using version from your original file
        run: cargo binstall -y --force lychee@0.15.1

      # --- START DEBUGGING STEPS ---
      - name: Debug - Show Checked Out Commit
        run: |
          echo ">>> Checking commit:"
          git log -1 --format="Commit HASH: %H%nCommit Subject: %s"

      - name: Debug - Show Working Directory
        run: |
          echo ">>> Running in directory:"
          pwd

      - name: Debug - List Markdown Files Found
        run: |
          echo ">>> Markdown files found by git ls-files:"
          git ls-files '*.md' ':!:documentation/*' || echo "git ls-files command failed!"

      - name: Debug - Show Content of README.md
        run: |
          echo ">>> Attempting to show content of README.md (if it exists):"
          if [ -f README.md ]; then
            echo "--- README.md Content Start ---"
            cat README.md
            echo "--- README.md Content End ---"
          else
            echo "README.md not found in $(pwd)"
            echo "Listing all files in current directory:"
            ls -la
          fi
      # --- END DEBUGGING STEPS ---

      - name: Run Lychee Link Checker (Debug Mode - No Internal Cache) # Modified name
        run: |
          echo ">>> Attempting to remove default lychee cache file (.lychee-cache)..."
          rm -f .lychee-cache
          echo ">>> Attempting to remove workflow cache file (.lycheecache)..."
          rm -f .lycheecache # Remove the one specified in Actions cache path too, just in case
          echo ">>> Running lychee WITHOUT --cache flag..."
          # Execute the command: Find relevant markdown files and pipe to lychee without its cache flag
          git ls-files '*.md' ':!:documentation/*' | xargs lychee --base . --max-concurrency 6 # REMOVED --cache flag

      # We keep the save step, though it might not save much if lychee didn't use its internal cache
      - name: Save lychee Actions cache # Added name for clarity
        uses: actions/cache/save@v4
        # 'if: always()' ensures this runs even if the previous step failed
        if: always()
        with:
          path: .lycheecache # Matches the restore path
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: install cargo-binstall
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-binstall
          version: '=1.10.8'
          locked: true

      - run: cargo binstall -y --force dprint@0.47.2

      - run: dprint check

  foundry:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: forge fmt
        run: forge fmt --check
        working-directory: contracts

      - name: forge test
        run: forge test -vvv
        working-directory: contracts

  # Run as a separate job because we need to install a different set of tools.
  # In particular, it uses nightly Rust and _does not_ install Forge or cargo risczero.
  docs-rs:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    steps:
      # This is a workaround from: https://github.com/actions/checkout/issues/590#issuecomment-970586842
      - run: "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'
      - uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          # Building with docs.rs config requires the nightly toolchain.
          toolchain: nightly-2024-09-04
      - run: cargo +nightly-2024-09-04 doc -p boundless-market --all-features --no-deps
        env:
          RUSTDOCFLAGS: "--cfg docsrs -D warnings"

  # Check that cargo publish can package the boundless-market crate
  check-pusblish:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    steps:
      # This is a workaround from: https://github.com/actions/checkout/issues/590#issuecomment-970586842
      - run: "git checkout -f $(git -c user.name=x -c user.email=x@x commit-tree $(git hash-object -t tree /dev/null) < /dev/null) || :"
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      # TODO: Add dry-run publish checks for other crates; difficulty is they all depend on boundless-market being published
      - run: cargo publish -p boundless-market --dry-run

  examples:
    runs-on: [ self-hosted, Linux, X64, prod, cuda, g6.4xlarge ]
    strategy:
      matrix:
        workspace:
          - examples/counter
          - examples/smart-contract-requestor
          - examples/counter-with-callback
          - examples/composition
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          # Full history is required by license-check.py
          fetch-depth: 0
          submodules: recursive

      - name: install foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: install cuda
        uses: risc0/risc0/.github/actions/cuda@release-2.0

      - name: install rust
        uses: risc0/risc0/.github/actions/rustup@release-2.0
        with:
          toolchain: '1.85'

      - name: setup sccache + s3
        uses: ./.github/actions/sccache

      - name: install cargo risczero
        uses: ./.github/actions/bininstall-risc0
        with:
          risczero-version: '2.0.0'
          toolchain-version: '1.85.0'

      - name: install cargo-sort
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3
        with:
          crate: cargo-sort
          version: "=1.0.9"
          locked: true

      - name: cargo Sort
        run: cargo sort --workspace --check
        working-directory: ${{ matrix.workspace }}

      - name: cargo format
        run: cargo fmt --all -- --check
        working-directory: ${{ matrix.workspace }}

      - name: forge build
        run: forge build
        working-directory: contracts

      - name: cargo build
        run: cargo build --all-features --locked
        working-directory: ${{ matrix.workspace }}

      - name: cargo clippy
        run: cargo clippy --locked --workspace
        working-directory: ${{ matrix.workspace }}
        env:
          RISC0_SKIP_BUILD: 1

      - name: forge fmt
        run: forge fmt --check
        working-directory: ${{ matrix.workspace }}/contracts

      - name: forge test
        run: forge test -vvv
        working-directory: ${{ matrix.workspace }}/contracts

      - name: cargo test
        run: cargo test --all-features --locked -- --nocapture
        working-directory: ${{ matrix.workspace }}
        env:
          RUST_LOG: "info"
          RISC0_INFO: 1

      - name: sccache stats
        run: sccache --show-stats

  files-changed:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.changes.outputs.docker }}
      bento: ${{ steps.changes.outputs.bento }}

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          filters: |
            docker:
              - 'dockerfiles/**'
              - 'compose.yml'
              - '.env.broker-template'
            bento:
              - 'bento/**'

  docker:
    runs-on: [ self-hosted, Linux, X64, prod, cpu ]
    needs: files-changed
    if: needs.files-changed.outputs.docker == 'true'
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: docker-compose lint
        run: docker compose --profile broker --env-file ./.env.broker-template config

      - name: Fetch CI AWS Creds
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-west-2'
          role-to-assume: 'arn:aws:iam::083632199359:role/gha_oidc_risc0_cache_shared_access'
          output-credentials: true

      - name: create ci creds file
        run: |
          echo "[default]" > ./dockerfiles/ci-cache-creds.txt
          echo "aws_access_key_id=${{ steps.aws-creds.outputs.aws-access-key-id }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_secret_access_key=${{ steps.aws-creds.outputs.aws-secret-access-key }}" >> ./dockerfiles/ci-cache-creds.txt && \
          echo "aws_session_token=${{ steps.aws-creds.outputs.aws-session-token }}" >> ./dockerfiles/ci-cache-creds.txt

      - name: Setup docker builder
        run: docker buildx create --driver docker-container --use

      - name: docker compose build
        run: docker compose --profile broker --env-file ./.env.broker-template -f compose.yml -f ./dockerfiles/compose.ci.yml build
