import {ProofRequest} from "boundless-market/types/ProofRequest.sol";
import {RequestId} from "boundless-market/types/RequestId.sol";
import "forge-std/console.sol";
import "forge-std/Test.sol";

contract SmartContractRequestorTest is Test {
    function test_isValidSignature() public {

        bytes memory sig = hex"00000000000000000000000000000000000000000000000000000000000000200000000000000001a51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c00000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000f8fc927bc07a3e6881ed4a58a4c94fc1da0f109fed297d01498dc36784d4df310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000206659f2973a26e076eb02323ab39b18ba563d19f294d3b6b7fd2ed3f0b59ef726000000000000000000000000000000000000000000000000000000000000008766696c653a2f2f2f7661722f666f6c646572732f386c2f63333530627a5f73306a3132723177336d7463676b68727230303030676e2f542f2e746d707a654e5138632f663866633932376263303761336536383831656434613538613463393466633164613066313039666564323937643031343938646333363738346434646633312e656c660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008966696c653a2f2f2f7661722f666f6c646572732f386c2f63333530627a5f73306a3132723177336d7463676b68727230303030676e2f542f2e746d707a654e5138632f626163356366623966663763343634623131626436616330336163623332663736363936356630666639336364666139313965323531383037626336366132632e696e7075740000000000000000000000000000000000000000000000";
        ProofRequest memory request = abi.decode(sig, (ProofRequest));
        console.log("Request: ");
        console.log(RequestId.unwrap(request.id));
        console.logBytes32(bytes32(RequestId.unwrap(request.id)));
        console.log("image");
        console.logBytes32(request.requirements.imageId);
        console.log("input data");
        console.logBytes(request.input.data);

        bytes32 reqDigest = request.eip712Digest();
        console.log("reqDigest");
        console.logBytes32(reqDigest);
        bytes32 reqHash = _hashTypedData(reqDigest);
        console.log("reqHash");
        console.logBytes32(reqHash);

        bytes32 expectedReqHash = hex"7b29a4cafedf255a02a5350e2b426f5e7e606486f909f1ba0edad655a70faa12";
        console.log("expected req hash");
        console.logBytes32(expectedReqHash);

    }

    /// @notice Creates an EIP-712 typed data hash
    function _hashTypedData(bytes32 dataHash) internal view returns (bytes32) {
        bytes32 domainSep = hex"1c5b653e38bf30e2db0b4c9306d0dd0904ca373552d90b8d7e65d5fd0c103e11";
        return keccak256(abi.encodePacked("\x19\x01", domainSep, dataHash));
    }
}
